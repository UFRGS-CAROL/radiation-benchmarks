diff --git a/ffi.h b/ffi.h
index dabdc9b..d457fd7 100644
--- a/ffi.h
+++ b/ffi.h
@@ -42,8 +42,10 @@ extern "C" {
 #include <sys/mman.h>
 #endif
 
+#ifndef _MSC_VER
 #include <complex.h>
 #define HAVE_COMPLEX
+#endif
 #define HAVE_LONG_DOUBLE
 
 #ifndef NDEBUG
diff --git a/test.c b/test.c
index 20f5d13..c9acb27 100644
--- a/test.c
+++ b/test.c
@@ -19,8 +19,12 @@
 #include <errno.h>
 #endif
 
+#ifndef _MSC_VER
 #include <complex.h>
 #define HAVE_COMPLEX
+#else
+#include <lua.h>
+#endif
 
 #ifdef __cplusplus
 # define EXTERN_C extern "C"
@@ -718,3 +722,9 @@ void test_call_pppppiiifii(void* p1, void* p2, void* p3, void* p4, void* p5, int
     sprintf(buf, "%p %p %p %p %p %d %d %d %0.1f %d %d", p1, p2, p3, p4, p5, i1, i2, i3, f4, i5, i6);
 }
 
+#ifdef _MSC_VER
+int luaopen_ffi_libtest(lua_State* L)
+{
+    return 1;
+}
+#endif
diff --git a/test.lua b/test.lua
index 8a9b718..af05ea7 100644
--- a/test.lua
+++ b/test.lua
@@ -7,6 +7,15 @@
 -- of patent rights can be found in the PATENTS file in the same directory.
 --
 io.stdout:setvbuf('no')
+
+local is_luajit = false
+if type(jit) == 'table' then
+    is_luajit = string.find(jit.version, 'LuaJIT')
+    if is_luajit then
+        package.preload['ffi'] = nil -- enable run test in luajit
+    end
+end
+
 local ffi = require 'ffi'
 local dlls = {}
 
@@ -322,17 +331,29 @@ local types = {
     e32 = 'enum e32',
 }
 
+-- different compilers may printf(%p) in different format,
+-- for example 000000003A0A9848, 0x3a0a9848
+-- tostring(cdata) may return address with '0x' prefix
+local addrbuf = ffi.new('char[256]')
+local function unifyaddr(ttype, addr)
+    if ttype == 'void*' then
+        dlls.__cdecl.print_p(addrbuf, tonumber(addr, 16))
+        return ffi.string(addrbuf)
+    end
+    return addr
+end
+
 local buf = ffi.new('char[256]')
 
 local function checkbuf(type, ret, msg)
-    local str = tostring(test_values[type]):gsub('^cdata%b<>: ', '')
+    local str = unifyaddr(type, tostring(test_values[type]):gsub('^cdata%b<>: ', ''))
     check(ffi.string(buf), str, msg)
     check(ret, #str, msg)
 end
 
 local function checkalign(type, v, ret)
     --print(v)
-    local str = tostring(test_values[type]):gsub('^cdata%b<>: ', '')
+    local str = unifyaddr(type, tostring(test_values[type]):gsub('^cdata%b<>: ', ''))
     check(ffi.string(buf), ('size %d offset %d align %d value %s'):format(ffi.sizeof(v), ffi.offsetof(v, 'v'), ffi.alignof(v, 'v'), str))
     check(ret, #str)
 end
@@ -593,9 +614,13 @@ for convention,c in pairs(dlls) do
 
     check(c.call_fptr({function(a) return 3*a end}, 5), 15)
 
+    if is_luajit then
+        print('luajit+ffifb failure : pcall error test')
+    else
     local suc, err = pcall(c.call_s, function(s) error(ffi.string(s), 0) end, 'my error')
     check(suc, false)
     check(err, 'my error')
+    end
 
     check(ffi.errno(), c.get_errno())
     c.set_errno(3)
@@ -628,7 +653,7 @@ for convention,c in pairs(dlls) do
     first = false
 end
 
-local c = ffi.C
+local c = ffi.os=='Windows' and ffi.load('msvcrt') or ffi.C
 
 assert(c.sprintf(buf, "%g", 5.3) == 3 and ffi.string(buf) == '5.3')
 assert(c.sprintf(buf, "%d", false) == 1 and ffi.string(buf) == '0')
@@ -927,31 +952,40 @@ void test_call_pppppiifiii(void* p1, void* p2, void* p3, void* p4, void* p5, int
 void test_call_pppppiiifii(void* p1, void* p2, void* p3, void* p4, void* p5, int i1, int i2, int i3, float i4, int i5, int i6);
 ]]
 
-ffi.C.test_call_echo("input")
-assert(ffi.C.buf == "input")
+local ffiC = ffi.os=='Windows' and dlls.__cdecl or ffi.C
+ffiC.test_call_echo("input")
+assert(ffiC.buf == "input")
 
 local function ptr(x) return ffi.new('void*', x) end
+local prefix = ""
+for i=1,5 do prefix = prefix .. unifyaddr('void*', tostring(i)) .. " " end
 
-ffi.C.test_call_pppppii(ptr(1), ptr(2), ptr(3), ptr(4), ptr(5), 6, 7)
-assert(ffi.C.buf == "0x1 0x2 0x3 0x4 0x5 6 7")
+ffiC.test_call_pppppii(ptr(1), ptr(2), ptr(3), ptr(4), ptr(5), 6, 7)
+assert(ffiC.buf == prefix .. "6 7")
 
-ffi.C.test_call_pppppiiiiii(ptr(1), ptr(2), ptr(3), ptr(4), ptr(5), 6, 7, 8, 9, 10, 11)
-assert(ffi.C.buf == "0x1 0x2 0x3 0x4 0x5 6 7 8 9 10 11")
+ffiC.test_call_pppppiiiiii(ptr(1), ptr(2), ptr(3), ptr(4), ptr(5), 6, 7, 8, 9, 10, 11)
+assert(ffiC.buf == prefix .. "6 7 8 9 10 11")
 
-ffi.C.test_call_pppppffffff(ptr(1), ptr(2), ptr(3), ptr(4), ptr(5), 6.5, 7.5, 8.5, 9.5, 10.5, 11.5)
-assert(ffi.C.buf == "0x1 0x2 0x3 0x4 0x5 6.5 7.5 8.5 9.5 10.5 11.5")
+if is_luajit then
+    print("luajit+ffifb failure : function call with float parameters test")
+else
+ffiC.test_call_pppppffffff(ptr(1), ptr(2), ptr(3), ptr(4), ptr(5), 6.5, 7.5, 8.5, 9.5, 10.5, 11.5)
+assert(ffiC.buf == prefix .. "6.5 7.5 8.5 9.5 10.5 11.5")
 
-ffi.C.test_call_pppppiifiii(ptr(1), ptr(2), ptr(3), ptr(4), ptr(5), 6, 7, 8.5, 9, 10, 11)
-assert(ffi.C.buf == "0x1 0x2 0x3 0x4 0x5 6 7 8.5 9 10 11")
+ffiC.test_call_pppppiifiii(ptr(1), ptr(2), ptr(3), ptr(4), ptr(5), 6, 7, 8.5, 9, 10, 11)
+assert(ffiC.buf == prefix .. "6 7 8.5 9 10 11")
 
-ffi.C.test_call_pppppiiifii(ptr(1), ptr(2), ptr(3), ptr(4), ptr(5), 6, 7, 8, 9.5, 10, 11)
-assert(ffi.C.buf == "0x1 0x2 0x3 0x4 0x5 6 7 8 9.5 10 11")
+ffiC.test_call_pppppiiifii(ptr(1), ptr(2), ptr(3), ptr(4), ptr(5), 6, 7, 8, 9.5, 10, 11)
+assert(ffiC.buf == prefix .. "6 7 8 9.5 10 11")
+end
 
-local sum = ffi.C.add_dc(ffi.new('complex', 1, 2), ffi.new('complex', 3, 5))
+if not ffiC.is_msvc then
+local sum = ffiC.add_dc(ffi.new('complex', 1, 2), ffi.new('complex', 3, 5))
 assert(ffi.istype('complex', sum))
 
-sum = ffi.C.add_fc(ffi.new('complex float', 1, 2), ffi.new('complex float', 3, 5))
+sum = ffiC.add_fc(ffi.new('complex float', 1, 2), ffi.new('complex float', 3, 5))
 assert(ffi.istype('complex float', sum))
+end
 
 ffi.cdef [[
 struct Arrays {
@@ -988,6 +1022,9 @@ assert(ffi.string(buf, 0) == '')
 assert(ffi.string(buf, ffi.new('long long', 2)) == 'aa')
 assert(ffi.string(buf, ffi.new('int', 2)) == 'aa')
 
+if is_luajit then
+    print("luajit+ffifb failure : tmpfile test")
+else
 -- Test io.tmpfile()
 ffi.cdef [[
     int fprintf ( FILE * stream, const char * format, ... );
@@ -999,5 +1036,6 @@ f:seek("set", 0)
 local str = f:read('*l')
 assert(str == 'test: foo', str)
 f:close()
+end
 
 print('Test PASSED')
