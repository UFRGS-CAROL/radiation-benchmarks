LavaMD OpenMP

* How to compile
  - Intel Xeon Phi (icc native compilation):
    $ make intel
  - General X86 (gcc):
    $ make general

Compilation should generate 5 binaries:
  - lavamd_gen: used to generate the input and gold output. Gold will be used to check if the execution generates a correct output.
  - lavamd_check: this binary will be used during radiation test, it will execute the benchmark kernel several times
  - lavamd_timing: this binary is used only for testing purposes, it will measure the time spent in every part of the benchmark. This binary will not record any log information
  - lavamd_err_inj: this binary is used only for testing purposes, it will change the input value to check if the gold verification is working. This binary will also enter into an infinite loop to test the setup that needs to kill hanging benchmarks.



* How to generate input data and gold output
  - gold output
    $ ./lavamd_gen <# cores> <# boxes 1d>
        - # cores: how many thread the openmp should create
        - # boxes 1d: input size, it tell how many boxes of particles should be created in each of the 3 dimension grid


* How to run a test

Before running the benchmark, the script radiation-benchmarks/scripts/install.py should be executed. This script will create the folder to store the log files and create the conf file in /etc/radiation-benchmark.conf

    $ ./lavamd_check <# cores> <# boxes 1d> <input_distances> <input_charges> <gold_output> <#iterations>
        - # cores: how many thread the openmp should create
        - # boxes 1d: input size, it tell how many boxes of particles should be created in each of the 3 dimension grid
        - input_distances: location of the particle distances input file
        - input_charges: location of the particle charges input file
        - gold_output: location of the the gold output file
        - #iterations: how many times the benchmark kernel should be executed, usually 100000 is enough for the radiation test (it will crash before reaching this number)



* Configuration used for Xeon Phi 3120A
  - input and gold generated
    $ ./lavamd_gen 228 15
    $ ./lavamd_gen 228 19
    $ ./lavamd_gen 228 23
  - configurations executed
    $ ./lavamd_check 228 15 input_distance_228_15 input_charges_228_15 output_gold_228_15 1000000
    $ ./lavamd_check 228 19 input_distance_228_19 input_charges_228_19 output_gold_228_19 1000000
    $ ./lavamd_check 228 23 input_distance_228_23 input_charges_228_23 output_gold_228_23 1000000

